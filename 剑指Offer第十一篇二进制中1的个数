请实现一个函数，输入一个整数（以二进制串形式），输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。

示例 1：

输入：00000000000000000000000000001011
输出：3
解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
示例 2：

输入：00000000000000000000000010000000
输出：1
解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
示例 3：

输入：11111111111111111111111111111101
输出：31
解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
 
提示：
输入必须是长度为 32 的 二进制串 。

思路一：把二进制整数变成字符串进行分类
class Solution:
    def hammingWeight(self, n: int) -> int:
        str1 = bin(n).replace('0b','')
        num = 0
        for i in range(len(str1)):
            if str1[i] == '1' :
                num += 1
        return num
        
return bin(n).count('1')
O（n）
采用 python 自带了方法 bin 函数，比如 bin(12345) 回返回字符串 '0b11000000111001', 这个时候在把0b去掉即可:

>>> bin(12345).replace('0b','')
'11000000111001'
3、也可以采用字符串的 format 方法来获取二进制：

>>> "{0:b}".format(12345)
'11000000111001'
>>> 

思路二：逐位判断
根据 与运算 定义，设二进制数字 n ，则有：
若 n&1=0 ，则 n 二进制 最右一位 为 0 ；
若 n&1=1 ，则 n 二进制 最右一位 为 1 。
根据以上特点，考虑以下 循环判断 ：
判断 n 最右一位是否为 1 ，根据结果计数。
将 n右移一位（本题要求把数字 n 看作无符号数，因此使用 无符号右移 操作）。

class Solution:
    def hammingWeight(self, n: int) -> int:
        res = 0
        while n:
            res += n & 1
            n >>= 1
        return res
        
        
